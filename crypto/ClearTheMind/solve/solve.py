def nth_root(x, n):
    hi = 1
    while hi ** n <= x:
        hi *= 2
    lo = hi // 2
    while lo < hi:
        mid = (lo + hi) // 2
        mid_nth = mid ** n
        if lo < mid and mid_nth < x:
            lo = mid
        elif hi > mid and mid_nth > x:
            hi = mid
        else:
            return mid
    return mid + 1

n = 102346477809188164149666237875831487276093753138581452189150581288274762371458335130208782251999067431416740623801548745068435494069196452555130488551392351521104832433338347876647247145940791496418976816678614449219476252610877509106424219285651012126290668046420434492850711642394317803367090778362049205437
c = 4458558515804625757984145622008292910146092770232527464448604606202639682157127059968851563875246010604577447368616002300477986613082254856311395681221546841526780960776842385163089662821
e = 3

m = nth_root(c, e)
# convert the result into bytes, then translate to ascii
print(bytearray.fromhex(hex(m)[2:]).decode())
